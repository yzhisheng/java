<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.sakura.maven</groupId>
    <artifactId>maven_parent</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--    聚合概念-->
    <!--    Maven 聚合是指将多个项目组织到一个父级项目中，以便一起构建和管理的机制。聚合可以帮助我们更好地管理一组相关的子项目，同时简化它们的构建和部署过程。-->

    <!--    聚合作用-->
    <!--    1.  管理多个子项目：通过聚合，可以将多个子项目组织在一起，方便管理和维护。-->
    <!--    2.  构建和发布一组相关的项目：通过聚合，可以在一个命令中构建和发布多个相关的项目，简化了部署和维护工作。-->
    <!--    3.  优化构建顺序：通过聚合，可以对多个项目进行顺序控制，避免出现构建依赖混乱导致构建失败的情况。-->
    <!--    4.  统一管理依赖项：通过聚合，可以在父项目中管理公共依赖项和插件，避免重复定义-->

    <!--    通过触发父工程构建命令、引发所有子模块构建！产生反应堆！-->

    <!--  集合的子工程  -->
    <modules>
        <module>maven_son</module>
        <module>maven_daughter</module>
    </modules>
    <!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom -->
    <packaging>pom</packaging>


    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>

    <!--   依赖管理 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>2.0.27</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>1.2.16</version>
            </dependency>

            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>5.10.2</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>servlet-api</artifactId>
                <version>2.5</version>
                <scope>provided</scope>
            </dependency>
        </dependencies>

    </dependencyManagement>


    <!--    &lt;!&ndash;   子工程会自动依赖父工程的jar &ndash;&gt;-->
    <!--    &lt;!&ndash;  发现父工程的设置了scope后，子工程依然可以继承，所以父工程定义scope 属性无效 &ndash;&gt;-->
    <!--    <dependencies>-->
    <!--        <dependency>-->
    <!--            <groupId>com.alibaba</groupId>-->
    <!--            <artifactId>fastjson</artifactId>-->
    <!--            <version>2.0.27</version>-->
    <!--        </dependency>-->

    <!--        <dependency>-->
    <!--            <groupId>org.junit.jupiter</groupId>-->
    <!--            <artifactId>junit-jupiter-api</artifactId>-->
    <!--            <version>5.10.2</version>-->
    <!--            <scope>test</scope>-->
    <!--        </dependency>-->

    <!--        <dependency>-->
    <!--            <groupId>javax.servlet</groupId>-->
    <!--            <artifactId>servlet-api</artifactId>-->
    <!--            <version>2.5</version>-->
    <!--            <scope>provided</scope>-->
    <!--        </dependency>-->
    <!--    </dependencies>-->

</project>