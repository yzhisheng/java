<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--    GroupID 格式：com.{公司/BU }.业务线.\[子业务线]，最多 4 级。
           说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。-->
    <groupId>com.sakura.maven</groupId>
    <!--    ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。-->
    <artifactId>maven_java</artifactId>
    <!--   Version版本号格式推荐：主版本号.次版本号.修订号
            1） 主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。
            2） 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。
            3） 修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。
            例如： 初始→1.0.0  修改bug → 1.0.1  功能调整 → 1.1.1等  -->
    <version>1.0-SNAPSHOT</version>

    <!--  打包方式，默认jar   -->
    <packaging>jar</packaging>

    <!--  配置属性   -->
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <maven.compiler.compilerVersion>8</maven.compiler.compilerVersion>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!--  定义统一版本管理      -->
        <spring.version>6.0.10</spring.version>
    </properties>

    <dependencies>


        <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!--     引入junit依赖   -->
        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.8.2</version>
            <!--    依赖范围        -->
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.26</version>
            <scope>provided</scope>
        </dependency>
        <!--    依赖范围    -->
        <!--        | compile  | 编译依赖范围，scope 元素的缺省值。使用此依赖范围的 Maven 依赖，对于三种 classpath 均有效，即该 Maven 依赖在上述三种 classpath 均会被引入。例如，log4j 在编译、测试、运行过程都是必须的。 |-->
        <!--        | test     | 测试依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath 有效。例如，Junit 依赖只有在测试阶段才需要。 |-->
        <!--        | provided | 已提供依赖范围。使用此依赖范围的 Maven 依赖，只对编译 classpath 和测试 classpath 有效。例如，servlet-api 依赖对于编译、测试阶段而言是需要的，但是运行阶段，由于外部容器已经提供，
                                        故不需要 Maven 重复引入该依赖。 |-->
        <!--        | runtime      | 运行时依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath、运行 classpath 有效。例如，JDBC 驱动实现依赖，其在编译时只需 JDK 提供的 JDBC 接口即可，
                                            只有测试、运行阶段才需要实现了 JDBC 接口的驱动。 |-->
        <!--        | system       | 系统依赖范围，其效果与 provided 的依赖范围一致。其用于添加非 Maven 仓库的本地依赖，通过依赖元素 dependency 中的 systemPath 元素指定本地依赖的路径。鉴于使用其会导致项目的可移植性降低，
                                        一般不推荐使用。 |-->
        <!--        | import       | 导入依赖范围，该依赖范围只能与 dependencyManagement 元素配合使用，其功能是将目标 pom.xml 文件中 dependencyManagement 的配置导入合并到当前 pom.xml 的 dependencyManagement 中。 |-->
    </dependencies>


    <build>
        <!--  自定义打包名称      -->
        <finalName>maven_java.jar</finalName>
        <!--设置要打包的资源位置-->
        <resources>
            <resource>
                <!--设置资源所在目录-->
                <directory>src/main/java</directory>
                <includes>
                    <!--设置包含的资源类型-->
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <!-- tomcat插件 -->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <port>8090</port>
                    <path>/</path>
                    <uriEncoding>UTF-8</uriEncoding>
                    <server>tomcat7</server>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>